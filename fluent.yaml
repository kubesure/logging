apiVersion: v1
kind: ConfigMap
metadata:
  name: fluentd-conf
data:
  fluent.conf: |
    <match fluent.**>
      @type null
    </match>
    <source>
      @type tail
      path /var/log/containers/*.log
      pos_file /var/log/fluentd-containers.log.pos
      time_format %Y-%m-%dT%H:%M:%S.%NZ
      tag kubernetes.*
      format json
      read_from_head true
    </source>
    <filter kubernetes.**>
      @type kubernetes_metadata
    </filter>
    <match kubernetes.var.log.containers.**fluentd**.log>
      @type null
    </match>
    <match kubernetes.var.log.containers.**kube-system**.log>
      @type null
    </match>
    <match kubernetes.**>
      @type stdout
    </match>
---
apiVersion: extensions/v1beta1
kind: DaemonSet
metadata:
  name: fluentd
  namespace: kube-system
  labels:
    app: fluentd  
    type: cluster
    kubernetes.io/cluster-service: "true"
spec:
  template: 
    metadata:
       labels:
         app: fluentd  
         type: cluster
         kubernetes.io/cluster-service: "true"              
    spec: 
      containers:
      - name: fluentd
        #image: fluent/fluentd-kubernetes-daemonset:elasticsearch
        image: fluent/fluentd:v0.14.10
        env: 
          #- name: FLUENT_ELASTICSEARCH_HOST
            #value: <hostname>
          #- name: FLUENT_ELASTICSEARCH_PORT
            #value: "9200"
          #- name: FLUENT_ELASTICSEARCH_SCHEME
            #value: "http"                   
          - name: FLUENT_UID
            value: "0" 
        resources: 
          limits: 
            memory: 200Mi
          requests: 
            cpu: 100m 
            memory: 200Mi
        volumeMounts:
        - name: varlog
          mountPath: /var/log
        - name: varlibdockercontainers
          mountPath: /var/lib/docker/containers
          readOnly: true
      terminationGracePeriodSeconds: 30                          
      volumes:
      - name: varlog
        hostPath: 
          path: /var/log
      - name: varlibdockercontainers
        hostPath:
            path: /var/lib/docker/containers               
     
